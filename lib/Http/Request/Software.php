<?php

namespace NAV\OnlineInvoice\Http\Request;

use Symfony\Component\Validator\Constraints as Assert;

class Software
{
    /**
     * Invoicing programme ID
     * 
     * The softwareId is an 18-length string used to identify the invoicing program used.
     * 
     * Recommendation for generating softwareId: The first two characters of the ID should be the country
     * code of the software developer, as per ISO 3166 alpha-2. Additional characters of the identifier should
     * include the tax registration number of the developer company, with the appropriate number of digits
     * (in some countries, the length of the tax registration number may differ significantly from the 8 digits
     * used in Hungary).
     * 
     * Additional characters of the identifier shall be generated by the developer in such a way as to ensure
     * the identifierâ€™s uniqueness. The developer may decide to create separate identifiers for different
     * versions of a particular software product, or for instances running at different customers. The same
     * instance of the same software version must report the same softwareId.
     * 
     * If multiple software development companies are involved in the development of the invoicing program
     * (or its individual modules), the identifier should include the data of one of them, based on mutual
     * agreement.
     *
     * @Assert\NotBlank(groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     * @Assert\Regex("/^[0-9A-Z\-]{18}$/", groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     */
    protected $id;
    
    /**
     * setter for id
     *
     * @param mixed 
     * @return self
     */
    public function setId(string $value): self
    {
        $this->id = $value;
        
        return $this;
    }
    
    /**
     * getter for id
     * 
     * @return mixed return value for 
     */
    public function getId(): string
    {
        return $this->id;
    }
    
    /**
     * Invoicing programme name
     *
     * @Assert\NotBlank(groups={"v2.0", "v3.0"})
     * @Assert\Length(max=50, groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     * @Assert\Regex("/^.*[^\s].*$/", groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     */
    protected $name;
    
    /**
     * setter for name
     *
     * @param mixed 
     * @return self
     */
    public function setName(string $value): self
    {
        $this->name = $value;
        
        return $this;
    }
    
    /**
     * getter for name
     * 
     * @return mixed return value for 
     */
    public function getName(): string
    {
        return $this->name;
    }
    
    const OPERATIONS = ['LOCAL_SOFTWARE', 'ONLINE_SERVICE'];
    const OPERATION_LOCAL_SOFTWARE = 'LOCAL_SOFTWARE';
    const OPERATION_ONLINE_SERVICE = 'ONLINE_SERVICE';

    /**
     * Operation type for the invoicing programme
     *
     * @Assert\NotBlank(groups={"v2.0", "v3.0"})
     * @Assert\Choice(choices=Software::OPERATIONS, groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     */
    protected $operation;
    
    /**
     * setter for operation
     *
     * @param mixed 
     * @return self
     */
    public function setOperation(?string $value): self
    {
        $this->operation = $value;
        return $this;
    }
    
    /**
     * getter for operation
     * 
     * @return mixed return value for 
     */
    public function getOperation(): ?string
    {
        return $this->operation;
    }
    
    /**
     * Main version of the invoicing programme.
     *
     * @Assert\NotBlank(groups={"v2.0", "v3.0"})
     * @Assert\Length(max=15, groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     * @Assert\Regex("/^.*[^\s].*$/", groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     */
    protected $mainVersion;
    
    /**
     * setter for mainVersion
     *
     * @param mixed 
     * @return self
     */
    public function setMainVersion(string $value): self
    {
        $this->mainVersion = $value;
        return $this;
    }
    
    /**
     * getter for mainVersion
     * 
     * @return mixed return value for 
     */
    public function getMainVersion(): string
    {
        return $this->mainVersion;
    }
    
    /**
     * Name of the invoicing programme's developer
     *
     * @Assert\NotBlank(groups={"v2.0", "v3.0"})
     * @Assert\Length(max=512, groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     * @Assert\Regex("/^.*[^\s].*$/", groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     */
    protected $devName;
    
    /**
     * setter for devName
     *
     * @param mixed 
     * @return self
     */
    public function setDevName(string $value): self
    {
        $this->devName = $value;
        return $this;
    }
    
    /**
     * getter for devName
     * 
     * @return mixed return value for 
     */
    public function getDevName(): string
    {
        return $this->devName;
    }
    
    /**
     * Active email address of the invoicing programme's developer
     *
     * @Assert\NotBlank(groups={"v2.0", "v3.0"})
     * @Assert\Length(max=200, groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     * @Assert\Regex("/^.*[^\s].*$/", groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     */
    protected $devContact;
    
    /**
     * setter for devContact
     *
     * @param mixed 
     * @return self
     */
    public function setDevContact(string $value): self
    {
        $this->devContact = $value;
        return $this;
    }
    
    /**
     * getter for devContact
     * 
     * @return mixed return value for 
     */
    public function getDevContact(): string
    {
        return $this->devContact;
    }
    
    /**
     * Country code of the invoicing programme's developer
     *
     * @Assert\Length(max=2, groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     * @Assert\Country(groups={"v1.0", "v1.1", "v2.0", "v3.0"})
     */
    protected $devCountryCode;
    
    /**
     * setter for devCountryCode
     *
     * @param mixed 
     * @return self
     */
    public function setDevCountryCode(?string $value): self
    {
        $this->devCountryCode = $value;
        
        return $this;
    }
    
    /**
     * getter for devCountryCode
     * 
     * @return mixed return value for 
     */
    public function getDevCountryCode(): ?string
    {
        return $this->devCountryCode;
    }
    
    /**
     * Tax number of the invoicing programme's developer
     *
     * @Assert\Length(max=50, groups={"v2.0", "v3.0"})
     * @Assert\Regex("/^.*[^\s].*$/", groups={"v2.0", "v3.0"})
     */
    protected $devTaxNumber;
    
    /**
     * setter for devTaxNumber
     *
     * @param mixed 
     * @return self
     */
    public function setDevTaxNumber(?string $value): self
    {
        $this->devTaxNumber = $value;
        
        return $this;
    }
    
    /**
     * getter for devTaxNumber
     * 
     * @return mixed return value for 
     */
    public function getDevTaxNumber(): ?string
    {
        return $this->devTaxNumber;
    }
}
